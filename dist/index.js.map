{"version":3,"file":"index.js","sources":["../src/helpers/promise-middleware.ts","../src/hooks/useApiRequest/index.ts"],"sourcesContent":["export type MiddlewareType<T = any> = (res: T) => void;\n\nexport const setPromiseMiddleware = async (\n  promise: Promise<any>,\n  middleware: MiddlewareType[]\n) => {\n  const result = await promise;\n  for (const middlewareItem of middleware) await middlewareItem(result);\n  return result;\n};\n","import { useEffect, useState } from \"react\";\nimport { MiddlewareType, setPromiseMiddleware } from \"../../helpers/promise-middleware\";\n\nexport type API_REQUEST_STATUS = \"WAIT\" | \"PENDING\" | \"SUCCESS\" | \"FAIL\";\n\ntype TNullValue = undefined;\nexport const nullValue = undefined;\n\ntype TRequest<T> = Promise<T>;\n\nexport interface TUseApiRequestProps<T = any> {\n  alertService?: IAlertService;\n  getErrorMessageCallback?: (error: any) => string;\n  fetchOnMountData?: any;\n  request: (...args: any) => TRequest<T>;\n  defaultData?: T;\n  catchCallback?: (error: any) => void;\n  successMessage?: string;\n  middleware?: MiddlewareType[];\n  fetchOnMount?: boolean;\n}\n\nexport interface TUseApiRequestOutput<T> {\n  setData: (data: T | TNullValue) => void;\n  status: API_REQUEST_STATUS;\n  errorMessage: string;\n  isPending: boolean;\n  data: T | TNullValue;\n  sendRequest: (props?: any) => TRequest<any>;\n  cleanErrorMessage: () => void;\n}\n\nexport interface IAlert {\n  content: string;\n  title?: string;\n  image?: string;\n  color?: string;\n}\n\nexport interface IAlertService {\n  successAlert: (alert: IAlert) => void;\n  warningAlert: (alert: IAlert) => void;\n  errorAlert: (alert: IAlert) => void;\n}\n\nconst defaultGetErrorMessageCallback = (errorMessage: string) => errorMessage;\n\nconst useApiRequest = <T extends any>({\n                                        alertService,\n                                        getErrorMessageCallback = defaultGetErrorMessageCallback,\n                                        fetchOnMountData,\n                                        fetchOnMount,\n                                        middleware = [],\n                                        successMessage,\n                                        request,\n                                        defaultData,\n                                        catchCallback\n                                      }: TUseApiRequestProps<T>): TUseApiRequestOutput<T> => {\n  const [status, setStatus] = useState<API_REQUEST_STATUS>(\"WAIT\");\n  const [data, setData] = useState<T | TNullValue>(defaultData || nullValue);\n  const [errorMessage, setErrorMessageState] = useState<string>(\"\");\n  const setErrorMessage = (error: any) =>\n    setErrorMessageState(getErrorMessageCallback(error));\n  const cleanErrorMessage = () => setErrorMessageState(\"\");\n\n  const [isPending, setIsPending] = useState<boolean>(false);\n\n  const sendSuccessMessage = (res: any) => {\n    if (successMessage && alertService)\n      alertService.successAlert({ content: successMessage });\n    setStatus(\"SUCCESS\");\n    return res;\n  };\n\n  const middlewareList: MiddlewareType[] = [\n    ...middleware,\n    setData,\n    cleanErrorMessage,\n    sendSuccessMessage\n  ];\n\n  const sendRequest = (props?: any) => {\n    setIsPending(true);\n    setStatus(\"PENDING\");\n    return ((setPromiseMiddleware(\n      request(props),\n      middlewareList\n    ) as unknown) as Promise<any>)\n      .catch((error: any) => {\n        const errorMessage = getErrorMessageCallback(error);\n        setStatus(\"FAIL\");\n        setErrorMessage(errorMessage);\n        if (alertService) alertService.errorAlert({ content: errorMessage });\n        catchCallback && catchCallback(error);\n      })\n      .finally(() => {\n        setIsPending(false);\n      }) as TRequest<T>;\n  };\n\n  useEffect(() => {\n    if (fetchOnMount) sendRequest(fetchOnMountData);\n  }, []);\n\n  return {\n    setData,\n    status,\n    errorMessage,\n    cleanErrorMessage,\n    isPending,\n    data,\n    sendRequest\n  };\n};\n\nexport default useApiRequest;\n"],"names":["setPromiseMiddleware","promise","middleware","result","_a","middleware_1","_i","middlewareItem","nullValue","undefined","defaultGetErrorMessageCallback","errorMessage","useApiRequest","cleanErrorMessage","setErrorMessageState","sendRequest","props","setIsPending","setStatus","request","middlewareList","catch","error","getErrorMessageCallback","alertService","errorAlert","content","catchCallback","finally","_b","fetchOnMountData","fetchOnMount","_c","successMessage","defaultData","_d","useState","status","_e","data","setData","_f","_g","isPending","res","successAlert","useEffect"],"mappings":"wwDAEO,IAAMA,qBAAuB,SAClCC,EACAC,yHAEe,SAAMD,UAAfE,EAASC,aACcC,4BAAAC,eAAlBC,QAAmDJ,iBAArBC,iCAAZE,iBAC7B,SAAOH,SCFIK,eAAYC,EAuCnBC,+BAAiC,SAACC,GAAyB,OAAAA,GAE3DC,cAAgB,SAAgBR,GAgBV,SAApBS,IAA0B,OAAAC,EAAqB,IAkBjC,SAAdC,EAAeC,GAGnB,OAFAC,GAAa,GACbC,EAAU,WACDlB,qBACPmB,EAAQH,GACRI,GAECC,MAAM,SAACC,GACN,IAAMX,EAAeY,EAAwBD,GAC7CJ,EAAU,QA5BdJ,EAAqBS,EA6BDZ,IACZa,GAAcA,EAAaC,WAAW,CAAEC,QAASf,IACrDgB,GAAiBA,EAAcL,KAEhCM,QAAQ,WACPX,GAAa,SAhDmBO,iBACAK,4BAAAN,aAA0Bb,iCAC1BoB,qBACAC,iBACAC,eAAA9B,aAAa,KACb+B,mBACAd,YACAe,gBACAP,kBAEhCQ,EAAsBC,eAA6B,QAAlDC,OAAQnB,OACToB,EAAkBF,eAAyBF,GAAe1B,WAAzD+B,OAAMC,OACPC,EAAuCL,eAAiB,IAAvDzB,OAAcG,OAKf4B,EAA4BN,gBAAkB,GAA7CO,OAAW1B,OASZG,iBACDlB,GACHsC,EACA3B,EAVyB,SAAC+B,GAI1B,OAHIX,GAAkBT,GACpBA,EAAaqB,aAAa,CAAEnB,QAASO,IACvCf,EAAU,WACH0B,KAiCT,OAJAE,gBAAU,WACJf,GAAchB,EAAYe,IAC7B,IAEI,CACLU,UACAH,SACA1B,eACAE,oBACA8B,YACAJ,OACAxB"}